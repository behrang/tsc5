#include "imports/stdlib.fc";

() save_data(int public_key, int execution_time, slice receiver, int seqno) impure {
    begin_cell()
        .store_uint(public_key, 256)
        .store_uint(execution_time, 32)
        .store_slice(receiver)
        .store_uint(seqno, 32)
        .end_cell()
        .set_data();
}

(int, int, slice, int) load_data() {
    slice ds = get_data().begin_parse();
    int public_key = ds~load_uint(256);
    int execution_time = ds~load_uint(32);
    slice receiver = ds~load_msg_addr();
    int seqno = ds~load_uint(32);
    ds.end_parse();
    return (public_key, execution_time, receiver, seqno);
}

() recv_internal(cell in_msg_full, slice in_msg_body) impure {
}

() update(slice s) impure {
    ( int public_key, int execution_time, slice receiver, int seqno ) = load_data();

    slice signature = s~load_bits(512);
    cell ref = s~load_ref();
    slice ss = ref.begin_parse();
    int locked_for = ss~load_uint(32);
    int new_seqno = ss~load_uint(32);
    ss.end_parse();
    s.end_parse();

    throw_unless(119, new_seqno == seqno + 1);
    throw_unless(120, check_signature(ref.cell_hash(), signature, public_key));
    throw_unless(121, locked_for > 0);
    throw_unless(122, execution_time >= now());
    throw_unless(123, now() + locked_for >= execution_time);

    accept_message();

    save_data(public_key, now() + locked_for, receiver, new_seqno);
}

() claim(slice s) impure {
    ( int public_key, int execution_time, slice receiver, int seqno ) = load_data();

    throw_unless(124, execution_time <= now());

    accept_message();

    cell msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(receiver)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .end_cell();
    send_raw_message(msg, 128);
}

() recv_external(slice in_msg_body) impure {
    int op = in_msg_body~load_uint(32);

    if op == 0x9df10277 {
        update(in_msg_body);
    }

    if op == 0xbb4be234 {
        claim(in_msg_body);
    }
}

int get_seqno() method_id {
    ( _, _, _, int seqno ) = load_data();
    return seqno;
}

int get_execution_time() method_id {
    ( _, int execution_time, _, _ ) = load_data();
    return execution_time;
}
