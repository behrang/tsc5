#include "imports/stdlib.fc";

cell wrap_storage(int, cell);
cell migrate_one(cell);
cell process_message(cell, int, int, cell, slice);

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    int expected_version = in_msg_body~load_uint(32);
    if expected_version == 0 {
        return wrap_storage(1, get_data()).set_data();
    }

    cell expected_code = in_msg_body~load_maybe_ref();
    cell migrations = in_msg_body~load_dict();
    cell payload = in_msg_body~load_ref();

    slice ds = get_data().begin_parse();
    int current_version = ds~load_uint(32);
    cell storage = ds~load_ref();

    if current_version < expected_version {
        throw_if(200, expected_code.null?());

        do {
            ( slice ms, int f? ) = migrations.udict_get?(32, current_version);
            throw_unless(400, f?);
            current_version = ms~load_uint(32);
            cell migration_code = ms~load_maybe_ref();
            ifnot migration_code.null?() {
                set_c3(migration_code.begin_parse().bless());
                storage = migrate_one(storage);
            }
        } until current_version == expected_version;

        set_c3(expected_code.begin_parse().bless());
        set_code(expected_code);
    }

    storage = process_message(storage, my_balance, msg_value, in_msg_full, payload.begin_parse());

    return wrap_storage(expected_version, storage).set_data();
}

cell get_storage() {
    return get_data().begin_parse().preload_ref();
}

cell wrap_storage(int version, cell storage) {
    return begin_cell()
        .store_uint(version, 32)
        .store_ref(storage)
        .end_cell();
}

int version() method_id {
    return get_data().begin_parse().preload_uint(32);
}

;; <<<<< Custom version-specific code begins
;; This section (everything between << and >> characters) will be fully substituted for each version.
;; This is an IMPORTANT part, and these exact lines with <<<<< and >>>>> must be present in your code for the testing system to work correctly.
;; All the code provided here serves as an example of the version-code, which your update code must be compatible with.
;; Refer to the "3-example" directory for more version examples.

;; from counter-v0.fc
cell process_message(cell storage, int msg_value, int balance, cell in_msg_full, slice in_msg_body) impure {
    slice cs = storage.begin_parse();
    int current_amount = cs.preload_uint(32);
    return begin_cell().store_uint(current_amount + 1, 32).end_cell();
}

cell migrate_one(cell old_storage) { ;; it's just a placeholder that is required for correct compilation
    return old_storage;
}

;; Custom version-specific code ends >>>>>
